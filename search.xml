<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Sublime Text 3预览Markdown]]></title>
    <url>%2F2018%2F02%2F07%2FSublime-Text-3%E9%A2%84%E8%A7%88Markdown%2F</url>
    <content type="text"><![CDATA[Sublime Text 3预览Markdown安装控制器 按下按下ctrl+`出现小控制台 输入urllib.request,os; pf 12345678910111213141516171819## 安装插件 按下ctrl+shift+P打开快速菜单，键入’pcip’： 回车，等待数据更新，完成后会主动显示软件列表。 在里面输入以下软件名称并回车进行安装： Markdown Editing // Markdown编辑和语法高亮支持 Markdown Preview// Markdown导出html预览支持 auto-save // 可自定义的自动保存功能 耐心等待操作完成，之后关闭并重新打开Sublime Text 3.## 绑定快捷键``` &#123; &quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview_select&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;&#125; &#125;]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络]]></title>
    <url>%2F2018%2F01%2F27%2F%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScript Dom编程艺术]]></title>
    <url>%2F2017%2F10%2F17%2FJavaScript-Dom%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[事实上，文档中的每一个语速都是一个对象，利用DOM提供的方法能得到任何一个对象。 对象对象是由一些属性和方法组合在一起而构成的一个数据实体 属性是隶属于某个特定对象的变量； 方法是只有某个特定对象才能调用的函数；属性和方法都使用“点”语法来访问：Object.propertyObject.method() javascript语言里的对象可以分为三种类型。 用户定义对象（user-defined object）：由程序员自行创建的对象 内建对象（nativa object)：内建在javascript语言里的对象 宿主对象（hostobject）：由浏览器提供的对象 获取元素1.getElementById这个方法将返回一个与那个有着给定id属性值的元素节点对应的对象 1document.getElementById(id) 它是document对象特有的函数。在脚本代码里，函数名的后面必须跟有一对圆括号，这对圆括号包含着函数的参数。getElementById方法只有一个参数：你想获得的那个元素的id属性的值，这个id值必须放在单引号或双引号里。 typeof操作符可以告诉我们它的操作数是一个字符串、树枝、函数、布尔值还是对象。 2.getElementsByTagName 文档中的每一个元素都是一个对象，这个方法返回一个对象数组，每个对象分别对应着文档里有着给定标签的一个元素，只有一个参数，参数是标签的名字。 1element.getElementsByTagName(tag) 3.getElementsByClassName 这个方法让我们能够通过class属性中的类名来访问元素。 1getElementsByClassName(class) 获取和设置属性的值1.getAttribute getAttribute是一个函数。它只有一个参数——你打算查询的属性的名字,不是document对象，只能通过元素节点对象调用 1objeect.getAttribute(attribute) 2.setAttribute 不是document对象，只能通过元素节点对象调用,允许对属性节点的值做出修改 1objeect.setAttribute(attribute,value) 事件处理函数onmouseover:鼠标指针悬停在某个元素上时触发一个动作onmouseout:鼠标指针离开某个元素时触发一个动作onclick:用户点击链接时触发一个动作 3.childNodes属性 在一棵节点树上，childNodes属性可以用来获取任何一个元素的所有子元素，它是一个包含这个元素所有子元素的数组 1element.childNodes 4.nodeType属性 由childNodes属性返回的数组包含所有类型的节点而不仅仅是元素节点，几乎每一样东西都是一个节点，包括空格和换行符。 每一个节点都有nodeType属性，这个属性可以让我们知道自己正在与哪一种节点打交道，用下面的语法获取接节点nodeType属性： 1node.nodeType nodeType的值是一个数字而不是像“element”或“attribute”那样的英文字符串。nodeType属性共有12种可取值，但其中仅有3种具有实用价值。 元素节点的值是1 属性节点的值是2 文本节点的值是3 5.nodeValue属性 如果想改变一个文本节点的值，那就使用DOM提供的nodeValue属性，它用来得到（和设置）一个节点的值： 1node.nodeValue 6.firstChild和lastChild 数组的第一个元素firstChild,等同于 1node.childNOdes[0] 数组的最后一个元素lastChild,等同于 1node.childNOdes[node.chiNodes.length-1] 最佳实践 平稳退化 javascript与HTML标记分离如果想用javascript给某个网页添加一些行为，就不应该让javascript代码对这个网页有任何依赖。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github,搭建博客]]></title>
    <url>%2F2017%2F10%2F17%2FHexo-Github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。 准备工作1.安装Git BashGit Bash可以让我们在windown操作系统下使用命令 下载地址 安装步骤：一路next就行； 安装完成：打开Git Bash，输入git version,出现版本信息就是安装成功了。 配置Git BashYourName和YourEail都替换成你自己的 12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置 第1步：创建SSH Key。在用户主目录(C:\Users\登录名.ssh)下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开打开Git Bash，创建SSH Key：1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第2步：登陆GitHub，打开Account settings，“SSH Keys”页面：然后，点Add SSH Key，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key： 2.安装NodeJSHexo是基于nodeJS环境的静态博客 下载地址(说明：LTS为长期支持版，Current为当前最新版) 安装步骤：下载好msi文件后，双击安装，一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量）。 查看版本：命令：node -v 3.配置GitHub 首先注册、登录 https://github.com记住自己的Username 然后右上角选择 Create a new repository https://github.com/newRepository name 填自己的名字 http://yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了)例如，我的域名是http://github.com/onerme，就填入http://onerme.github.io。 正式开始1.安装Hexo 在git bash中新建一个文件夹，用来存放blog文件 然后cd到该文件夹里。 安装命令：npm install hexo-cli -g 比较慢，安装完成之后，查看版本hexo -v,输出版本信息成功安装。 初始化命令hexo init,完成之后会出现下面的文件 node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 2.配置Hexo在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)： 123deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 回到gitbash中，进入你的blog目录，分别执行以下命令： 123hexo cleanhexo generatehexo server //修改了Hexo文件就必须执行此命令 注：hexo 3.0把服务器独立成个别模块，需要单独安装： 1npm i hexo-server 打开浏览器输入：http://localhost:4000 上传到github先安装一波：npm install hexo-deployer-git --save（这样才能将你写好的文章部署到github服务器上并让别人浏览到）执行命令(建议每次都按照如下步骤部署)： 123hexo cleanhexo generatehexo deploy 注意deploy的过程中要输入你的username及passward。 3.开始写作创建一个新的帖子 1$ hexo new &quot;文件名称&quot; //必须在Hexo文件夹下打开gitbash输入 运行服务器 1$ hexo server 生成静态文件 1$ hexo generate 部署到远程站点 1$ hexo deploy 在浏览器中输入http://yourgithubname.github.io就可以查看你的博客了！]]></content>
  </entry>
  <entry>
    <title><![CDATA[学习指南]]></title>
    <url>%2F2017%2F10%2F17%2F%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[CSS 理解Flexbox：你需要知道的一切 解决Flexbox跨浏览器兼容Bug 探索Flexbox CSS Grid布局 以CSS为中心：完整的指南 CSS clip:rect矩形剪裁功能及一些应用介绍 CSS3 @font-face CSS清除浮动与位置属性 通用 CSS 笔记、建议与指导 生成居中代码作弊工具 版本控制 Git教程—— 廖雪峰 git - 简明指南 git pro 编辑器 Markdown·简单的世界 Markdown入门参考]]></content>
  </entry>
</search>
